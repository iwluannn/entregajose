name: senai_automacao
run-name: ${{ github.actor }} Pipeline deploy
on:
  push:
    branches:
      - "main"
    paths-ignore:
      - "*.txt"
jobs:
  githubactions-senai:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: INSTALL PACKAGES
        run: |
          sudo apt update -y
          sudo apt-get install figlet unzip -y

          curl https://static.snyk.io/cli/latest/snyk-linux -o snyk
          chmod +x ./snyk
          mv ./snyk /usr/local/bin/

          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
          wget -O- https://apt.releases.hashicorp.com/gpg | \
            gpg --dearmor | \
            sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
         
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
            https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
            sudo tee /etc/apt/sources.list.d/hashicorp.list

          sudo apt update -y

          sudo apt-get install terraform -y

      - name: SNYK AUTH
        run : |
          snyk -d auth $SNYK_TOKEN
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_AUTH_TOKEN }}
      - name: Configure AWS CLI
        if: always()
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Test aws cli
        if: always()
        run: aws sts get-caller-identity

      - name: Docker Login
        if: always()
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
     
      - name: Docker build (CI)
        if: always()
        run: |
          docker build --build-arg AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN --build-arg AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID --build-arg AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY --build-arg AWS_DEFAULT_REGION="us-east-1" -t apicontainer .
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
         
      - name: Docker Analysis (CI)
        if: always()
        run: |
          echo "VULNERABILIDADES" | figlet -c -f small
          snyk container test apicontainer:latest || true
         
      - name: Docker Push (CD)
        if: always()
        run: |
          COMMIT_SHA=$(echo $GITHUB_SHA | cut -c 1-5)
          echo $COMMIT_SHA
          docker tag apicontainer:latest iwluann/apicontainer:$COMMIT_SHA
          docker push iwluann/apicontainer:$COMMIT_SHA
<<<<<<< HEAD
     
      - name: Terraform Apply
        if: always()
        run: |
          COMMIT_SHA=$(echo $GITHUB_SHA | cut -c 1-5)
          terraform init
          terraform apply -var="github_sha=$COMMIT_SHA" --auto-approve
        env:
          GITHUB_SHA: ${{ github.sha }}
=======

          name: Deploy EC2 and Start API
          on:
            push:
              branches:
                - main
          jobs:
            deploy:
              runs-on: alpine

            steps:
            - name: Checkout repository
              uses: actions/checkout@v2
      
            - name: Set up Terraform
              uses: hashicorp/setup-terraform@v1
              with:
                terraform_version: 1.0.0
      
            - name: Initialize Terraform
              run: terraform init
      
            - name: Plan Terraform changes
              run: terraform plan
      
            - name: Apply Terraform changes
              run: terraform apply -auto-approve

            - name: Install SSH client
              run: apk add --no-cache openssh-client
              
            - name: Copy SSH private key
              run: echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
              
            - name: SSH into EC2 instance and start API
              run: ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} 'sudo docker run -d -p 8080:8080 minha-api'

>>>>>>> 426221bbcc24035048391571e1a64b8233eaabdd
